// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  // provider             = "sqlite"
  // url                  = "file:./db.sqlite"
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// 계속 jwt session 을 쓴다면 쓸모없는 모델
// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // sessions      Session[]

  // custom fields
  // 닉네임
  nickname     String?
  // 나를 표현하는 태그들
  tags         String?
  urls         String?
  // 자기 소개
  introduction String?
  // 내가 만든 이벤트들(이벤트장)
  events       Event[]
  // 참여한 이벤트
  participates Participation[]
  // 어떤 그룹의 멤버
  members      Member[]
  // 내가 만든 그룹들(그룹장)
  groups       Group[]
  // 유저 팔로우
  followers    Follows[]       @relation("following")
  following    Follows[]       @relation("follower")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Group {
  id          String   @id @default(cuid())
  password    Int?
  type        String   @default("normal")
  name        String
  description String
  tags        String?
  events      Event[]
  isPublic    Boolean?
  members     Member[]
  // 그룹장
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  isHost    Boolean  @default(false)
}

model Participation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String
  selectedCells String   @db.Text
}

model AnonymousParticipation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  identifier    String
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String
  selectedCells String   @db.Text
}

model Event {
  id                    String                   @id @default(cuid())
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  user                  User                     @relation(fields: [userId], references: [id])
  userId                String
  participates          Participation[]
  anonymousParticipates AnonymousParticipation[]
  title                 String
  description           String                   @db.Text
  startingTimes         String                   @db.Text
  timeSize              Int
  timeInterval          Int?
  headCounts            Int?
  isUnlimitedHeadCounts Boolean?
  tags                  String?
  status                String?
  group                 Group?                   @relation(fields: [groupId], references: [id])
  groupId               String?
  result                String?
}
